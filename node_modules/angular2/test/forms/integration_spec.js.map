{"version":3,"sources":["@traceur/generated/TemplateParser/5404","angular2/test/forms/integration_spec.js","angular2/test/forms/@traceur/generated/TemplateParser/24","angular2/test/forms/@traceur/generated/TemplateParser/25","@traceur/generated/TemplateParser/5412","@traceur/generated/TemplateParser/5403","@traceur/generated/TemplateParser/5402","@traceur/generated/TemplateParser/5408","@traceur/generated/TemplateParser/5411","@traceur/generated/TemplateParser/5409","@traceur/generated/TemplateParser/13","@traceur/generated/TemplateParser/5410"],"names":[],"mappings":"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","file":"angular2/test/forms/integration_spec.js","sourceRoot":"/Users/radokirov/angular/dist/js/dev/es6/","sourcesContent":["System.register($__placeholder__0, function($__export) {\n          $__placeholder__1\n        });","import {\n  afterEach,\n  AsyncTestCompleter,\n  beforeEach,\n  ddescribe,\n  describe,\n  dispatchEvent,\n  el,\n  expect,\n  iit,\n  inject,\n  it,\n  queryView,\n  xit\n} from 'angular2/test_lib';\nimport {DOM} from 'angular2/src/dom/dom_adapter';\n\nimport {Lexer, Parser, ChangeDetector, dynamicChangeDetection} from 'angular2/change_detection';\nimport {Compiler, CompilerCache} from 'angular2/src/core/compiler/compiler';\nimport {DirectiveMetadataReader} from 'angular2/src/core/compiler/directive_metadata_reader';\nimport {NativeShadowDomStrategy} from 'angular2/src/core/compiler/shadow_dom_strategy';\nimport {TemplateLoader} from 'angular2/src/core/compiler/template_loader';\nimport {ComponentUrlMapper} from 'angular2/src/core/compiler/component_url_mapper';\nimport {UrlResolver} from 'angular2/src/core/compiler/url_resolver';\nimport {StyleUrlResolver} from 'angular2/src/core/compiler/style_url_resolver';\nimport {CssProcessor} from 'angular2/src/core/compiler/css_processor';\nimport {EventManager, DomEventsPlugin} from 'angular2/src/core/events/event_manager';\nimport {VmTurnZone} from 'angular2/src/core/zone/vm_turn_zone';\n\nimport {MockTemplateResolver} from 'angular2/src/mock/template_resolver_mock';\n\nimport {Injector} from 'angular2/di';\n\nimport {Component, Decorator, Template, PropertySetter} from 'angular2/angular2';\nimport {ControlGroupDirective, ControlDirective, Control, ControlGroup, OptionalControl,\n  ControlValueAccessor, RequiredValidatorDirective, CheckboxControlValueAccessor,\n  DefaultValueAccessor, Validators} from 'angular2/forms';\n\nexport function main() {\n  function detectChanges(view) {\n    view.changeDetector.detectChanges();\n  }\n\n  function compile(componentType, template, context, callback) {\n    var tplResolver = new MockTemplateResolver();\n    var urlResolver = new UrlResolver();\n\n    var compiler = new Compiler(dynamicChangeDetection,\n      new TemplateLoader(null, null),\n      new DirectiveMetadataReader(),\n      new Parser(new Lexer()),\n      new CompilerCache(),\n      new NativeShadowDomStrategy(new StyleUrlResolver(urlResolver)),\n      tplResolver,\n      new ComponentUrlMapper(),\n      urlResolver,\n      new CssProcessor(null)\n    );\n\n    tplResolver.setTemplate(componentType, new Template({\n      inline: template,\n      directives: [ControlGroupDirective, ControlDirective, WrappedValue, RequiredValidatorDirective,\n        CheckboxControlValueAccessor, DefaultValueAccessor]\n    }));\n\n    compiler.compile(componentType).then((pv) => {\n      var eventManager = new EventManager([new DomEventsPlugin()], new FakeVmTurnZone());\n      var view = pv.instantiate(null, eventManager);\n      view.hydrate(new Injector([]), null, null, context, null);\n      detectChanges(view);\n      callback(view);\n    });\n  }\n\n  if (DOM.supportsDOMEvents()) {\n    describe(\"integration tests\", () => {\n      it(\"should initialize DOM elements with the given form object\", inject([AsyncTestCompleter], (async) => {\n        var ctx = new MyComp(new ControlGroup({\n          \"login\": new Control(\"loginValue\")\n        }));\n\n        var t = `<div [control-group]=\"form\">\n                <input type=\"text\" control=\"login\">\n              </div>`;\n\n        compile(MyComp, t, ctx, (view) => {\n          var input = queryView(view, \"input\")\n          expect(input.value).toEqual(\"loginValue\");\n          async.done();\n        });\n      }));\n\n      it(\"should update the control group values on DOM change\", inject([AsyncTestCompleter], (async) => {\n        var form = new ControlGroup({\n          \"login\": new Control(\"oldValue\")\n        });\n        var ctx = new MyComp(form);\n\n        var t = `<div [control-group]=\"form\">\n                  <input type=\"text\" control=\"login\">\n                </div>`;\n\n        compile(MyComp, t, ctx, (view) => {\n          var input = queryView(view, \"input\")\n\n          input.value = \"updatedValue\";\n          dispatchEvent(input, \"change\");\n\n          expect(form.value).toEqual({\"login\": \"updatedValue\"});\n          async.done();\n        });\n      }));\n\n      it(\"should update DOM elements when rebinding the control group\", inject([AsyncTestCompleter], (async) => {\n        var form = new ControlGroup({\n          \"login\": new Control(\"oldValue\")\n        });\n        var ctx = new MyComp(form);\n\n        var t = `<div [control-group]=\"form\">\n                <input type=\"text\" control=\"login\">\n              </div>`;\n\n        compile(MyComp, t, ctx, (view) => {\n          ctx.form = new ControlGroup({\n            \"login\": new Control(\"newValue\")\n          });\n          detectChanges(view);\n\n          var input = queryView(view, \"input\")\n          expect(input.value).toEqual(\"newValue\");\n          async.done();\n        });\n      }));\n\n      it(\"should update DOM element when rebinding the control name\", inject([AsyncTestCompleter], (async) => {\n        var ctx = new MyComp(new ControlGroup({\n          \"one\": new Control(\"one\"),\n          \"two\": new Control(\"two\")\n        }), \"one\");\n\n        var t = `<div [control-group]=\"form\">\n                <input type=\"text\" [control]=\"name\">\n              </div>`;\n\n        compile(MyComp, t, ctx, (view) => {\n          var input = queryView(view, \"input\")\n          expect(input.value).toEqual(\"one\");\n\n          ctx.name = \"two\";\n          detectChanges(view);\n\n          expect(input.value).toEqual(\"two\");\n          async.done();\n        });\n      }));\n\n      describe(\"different control types\", () => {\n        it(\"should support <input type=text>\", inject([AsyncTestCompleter], (async) => {\n          var ctx = new MyComp(new ControlGroup({\"text\": new Control(\"old\")}));\n\n          var t = `<div [control-group]=\"form\">\n                    <input type=\"text\" control=\"text\">\n                  </div>`;\n\n          compile(MyComp, t, ctx, (view) => {\n            var input = queryView(view, \"input\")\n            expect(input.value).toEqual(\"old\");\n\n            input.value = \"new\";\n            dispatchEvent(input, \"input\");\n\n            expect(ctx.form.value).toEqual({\"text\": \"new\"});\n            async.done();\n          });\n        }));\n\n        it(\"should support <input> without type\", inject([AsyncTestCompleter], (async) => {\n          var ctx = new MyComp(new ControlGroup({\"text\": new Control(\"old\")}));\n\n          var t = `<div [control-group]=\"form\">\n                    <input control=\"text\">\n                  </div>`;\n\n          compile(MyComp, t, ctx, (view) => {\n            var input = queryView(view, \"input\")\n            expect(input.value).toEqual(\"old\");\n\n            input.value = \"new\";\n            dispatchEvent(input, \"input\");\n\n            expect(ctx.form.value).toEqual({\"text\": \"new\"});\n            async.done();\n          });\n        }));\n\n        it(\"should support <textarea>\", inject([AsyncTestCompleter], (async) => {\n          var ctx = new MyComp(new ControlGroup({\"text\": new Control('old')}));\n\n          var t = `<div [control-group]=\"form\">\n                    <textarea control=\"text\"></textarea>\n                  </div>`;\n\n          compile(MyComp, t, ctx, (view) => {\n            var textarea = queryView(view, \"textarea\")\n            expect(textarea.value).toEqual(\"old\");\n\n            textarea.value = \"new\";\n            dispatchEvent(textarea, \"input\");\n\n            expect(ctx.form.value).toEqual({\"text\": 'new'});\n            async.done();\n          });\n        }));\n\n        it(\"should support <type=checkbox>\", inject([AsyncTestCompleter], (async) => {\n          var ctx = new MyComp(new ControlGroup({\"checkbox\": new Control(true)}));\n\n          var t = `<div [control-group]=\"form\">\n                    <input type=\"checkbox\" control=\"checkbox\">\n                  </div>`;\n\n          compile(MyComp, t, ctx, (view) => {\n            var input = queryView(view, \"input\")\n            expect(input.checked).toBe(true);\n\n            input.checked = false;\n            dispatchEvent(input, \"change\");\n\n            expect(ctx.form.value).toEqual({\"checkbox\": false});\n            async.done();\n          });\n        }));\n\n        it(\"should support <select>\", inject([AsyncTestCompleter], (async) => {\n          var ctx = new MyComp(new ControlGroup({\"city\": new Control(\"SF\")}));\n\n          var t = `<div [control-group]=\"form\">\n                      <select control=\"city\">\n                        <option value=\"SF\"></option>\n                        <option value=\"NYC\"></option>\n                      </select>\n                    </div>`;\n\n          compile(MyComp, t, ctx, (view) => {\n            var select = queryView(view, \"select\")\n            var sfOption = queryView(view, \"option\")\n            expect(select.value).toEqual('SF');\n            expect(sfOption.selected).toBe(true);\n\n            select.value = 'NYC';\n            dispatchEvent(select, \"change\");\n\n            expect(ctx.form.value).toEqual({\"city\": 'NYC'});\n            expect(sfOption.selected).toBe(false);\n            async.done();\n          });\n        }));\n\n        it(\"should support custom value accessors\", inject([AsyncTestCompleter], (async) => {\n          var ctx = new MyComp(new ControlGroup({\"name\": new Control(\"aa\")}));\n\n          var t = `<div [control-group]=\"form\">\n                    <input type=\"text\" control=\"name\" wrapped-value>\n                  </div>`;\n\n          compile(MyComp, t, ctx, (view) => {\n            var input = queryView(view, \"input\")\n            expect(input.value).toEqual(\"!aa!\");\n\n            input.value = \"!bb!\";\n            dispatchEvent(input, \"change\");\n\n            expect(ctx.form.value).toEqual({\"name\": \"bb\"});\n            async.done();\n          });\n        }));\n      });\n\n      describe(\"validations\", () => {\n        it(\"should use validators defined in html\", inject([AsyncTestCompleter], (async) => {\n          var form = new ControlGroup({\"login\": new Control(\"aa\")});\n          var ctx = new MyComp(form);\n\n          var t = `<div [control-group]=\"form\">\n                    <input type=\"text\" control=\"login\" required>\n                   </div>`;\n\n          compile(MyComp, t, ctx, (view) => {\n            expect(form.valid).toEqual(true);\n\n            var input = queryView(view, \"input\");\n\n            input.value = \"\";\n            dispatchEvent(input, \"change\");\n\n            expect(form.valid).toEqual(false);\n            async.done();\n          });\n        }));\n\n        it(\"should use validators defined in the model\", inject([AsyncTestCompleter], (async) => {\n          var form = new ControlGroup({\"login\": new Control(\"aa\", Validators.required)});\n          var ctx = new MyComp(form);\n\n          var t = `<div [control-group]=\"form\">\n                    <input type=\"text\" control=\"login\">\n                   </div>`;\n\n          compile(MyComp, t, ctx, (view) => {\n            expect(form.valid).toEqual(true);\n\n            var input = queryView(view, \"input\");\n\n            input.value = \"\";\n            dispatchEvent(input, \"change\");\n\n            expect(form.valid).toEqual(false);\n            async.done();\n          });\n        }));\n      });\n\n      describe(\"nested forms\", () => {\n        it(\"should init DOM with the given form object\", inject([AsyncTestCompleter], (async) => {\n          var form = new ControlGroup({\n            \"nested\": new ControlGroup({\n              \"login\": new Control(\"value\")\n            })\n          });\n          var ctx = new MyComp(form);\n\n          var t = `<div [control-group]=\"form\">\n                    <div control-group=\"nested\">\n                      <input type=\"text\" control=\"login\">\n                    </div>\n                </div>`;\n\n          compile(MyComp, t, ctx, (view) => {\n            var input = queryView(view, \"input\")\n            expect(input.value).toEqual(\"value\");\n            async.done();\n          });\n        }));\n\n        it(\"should update the control group values on DOM change\", inject([AsyncTestCompleter], (async) => {\n          var form = new ControlGroup({\n            \"nested\": new ControlGroup({\n              \"login\": new Control(\"value\")\n            })\n          });\n          var ctx = new MyComp(form);\n\n          var t = `<div [control-group]=\"form\">\n                      <div control-group=\"nested\">\n                        <input type=\"text\" control=\"login\">\n                      </div>\n                  </div>`;\n\n          compile(MyComp, t, ctx, (view) => {\n            var input = queryView(view, \"input\")\n\n            input.value = \"updatedValue\";\n            dispatchEvent(input, \"change\");\n\n            expect(form.value).toEqual({\"nested\": {\"login\": \"updatedValue\"}});\n            async.done();\n          });\n        }));\n      });\n    });\n  }\n}\n\n@Component({\n  selector: \"my-comp\"\n})\nclass MyComp {\n  form:ControlGroup;\n  name:string;\n\n  constructor(form = null, name = null) {\n    this.form = form;\n    this.name = name;\n  }\n}\n\n\n@Decorator({\n  selector:'[wrapped-value]',\n  events: {\n    'change' : 'handleOnChange($event.target.value)'\n  }\n})\nclass WrappedValue {\n  _setProperty:Function;\n  onChange:Function;\n\n  constructor(cd:ControlDirective, @PropertySetter('value') setProperty:Function) {\n    super();\n    this._setProperty = setProperty;\n    cd.valueAccessor = this;\n  }\n\n  writeValue(value) {\n    this._setProperty(`!${value}!`);\n  }\n\n  handleOnChange(value) {\n    this.onChange(value.substring(1, value.length - 1));\n  }\n}\n\nclass FakeVmTurnZone extends VmTurnZone {\n  constructor() {\n    super({enableLongStackTrace: false});\n  }\n\n  run(fn) {\n    fn();\n  }\n\n  runOutsideAngular(fn) {\n    fn();\n  }\n}","Object.defineProperty($__placeholder__0, $__placeholder__1,\n        {get: function() {return $__placeholder__2}});","assert.argumentTypes($__placeholder__0)","\n        $__export($__placeholder__0, $__placeholder__1)\n      ","return {\n      setters: $__placeholder__0,\n      execute: $__placeholder__1\n    }","function($__m) {\n          $__placeholder__0\n        }","$__placeholder__0 = $__m.$__placeholder__1;","$__placeholder__0 = $__placeholder__1","function() {\n          var $__placeholder__0 = $__placeholder__1;\n          return ($traceurRuntime.createClass)($__placeholder__2, $__placeholder__3,\n                                               $__placeholder__4);\n        }()","$traceurRuntime.superConstructor($__placeholder__0).call($__placeholder__1)","function($__super) {\n          var $__placeholder__0 = $__placeholder__1;\n          return ($traceurRuntime.createClass)($__placeholder__2, $__placeholder__3,\n                                               $__placeholder__4, $__super);\n        }($__placeholder__5)"]}