{"version":3,"sources":["@traceur/generated/TemplateParser/5404","angular2/test/forms/model_spec.js","@traceur/generated/TemplateParser/5412","@traceur/generated/TemplateParser/5403","@traceur/generated/TemplateParser/5402","@traceur/generated/TemplateParser/5408"],"names":[],"mappings":"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","file":"angular2/test/forms/model_spec.js","sourceRoot":"/Users/radokirov/angular/dist/js/dev/es6/","sourcesContent":["System.register($__placeholder__0, function($__export) {\n          $__placeholder__1\n        });","import {ddescribe, describe, it, iit, xit, expect, beforeEach, afterEach, el} from 'angular2/test_lib';\nimport {ControlGroup, Control, OptionalControl, Validators} from 'angular2/forms';\n\nexport function main() {\n  describe(\"Form Model\", () => {\n    describe(\"Control\", () => {\n      describe(\"validator\", () => {\n        it(\"should run validator with the initial value\", () => {\n          var c = new Control(\"value\", Validators.required);\n          expect(c.valid).toEqual(true);\n        });\n\n        it(\"should rerun the validator when the value changes\", () => {\n          var c = new Control(\"value\", Validators.required);\n          c.updateValue(null);\n          expect(c.valid).toEqual(false);\n        });\n\n        it(\"should return errors\", () => {\n          var c = new Control(null, Validators.required);\n          expect(c.errors).toEqual({\"required\" : true});\n        });\n      });\n\n      describe(\"pristine\", () => {\n        it(\"should be true after creating a control\", () => {\n          var c = new Control(\"value\");\n          expect(c.pristine).toEqual(true);\n        });\n\n        it(\"should be false after changing the value of the control\", () => {\n          var c = new Control(\"value\");\n          c.updateValue(\"new value\");\n          expect(c.pristine).toEqual(false);\n        });\n      });\n\n      describe(\"dirty\", () => {\n        it(\"should be false after creating a control\", () => {\n          var c = new Control(\"value\");\n          expect(c.dirty).toEqual(false);\n        });\n\n        it(\"should be true after changing the value of the control\", () => {\n          var c = new Control(\"value\");\n          c.updateValue(\"new value\");\n          expect(c.dirty).toEqual(true);\n        });\n      });\n    });\n\n    describe(\"ControlGroup\", () => {\n      describe(\"value\", () => {\n        it(\"should be the reduced value of the child controls\", () => {\n          var g = new ControlGroup({\n            \"one\": new Control(\"111\"),\n            \"two\": new Control(\"222\")\n          });\n          expect(g.value).toEqual({\"one\": \"111\", \"two\": \"222\"});\n        });\n\n        it(\"should be empty when there are no child controls\", () => {\n          var g = new ControlGroup({});\n          expect(g.value).toEqual({});\n        });\n\n        it(\"should support nested groups\", () => {\n          var g = new ControlGroup({\n            \"one\": new Control(\"111\"),\n            \"nested\": new ControlGroup({\n              \"two\" : new Control(\"222\")\n            })\n          });\n          expect(g.value).toEqual({\"one\": \"111\", \"nested\" : {\"two\": \"222\"}});\n\n          g.controls[\"nested\"].controls[\"two\"].updateValue(\"333\");\n\n          expect(g.value).toEqual({\"one\": \"111\", \"nested\" : {\"two\": \"333\"}});\n        });\n      });\n\n      describe(\"validator\", () => {\n        it(\"should run the validator with the initial value (valid)\", () => {\n          var g = new ControlGroup({\n            \"one\": new Control('value', Validators.required)\n          });\n\n          expect(g.valid).toEqual(true);\n\n          expect(g.errors).toEqual(null);\n        });\n\n        it(\"should run the validator with the initial value (invalid)\", () => {\n          var one = new Control(null, Validators.required);\n          var g = new ControlGroup({\"one\": one});\n\n          expect(g.valid).toEqual(false);\n\n          expect(g.errors).toEqual({\"required\": [one]});\n        });\n\n        it(\"should run the validator with the value changes\", () => {\n          var c = new Control(null, Validators.required);\n          var g = new ControlGroup({\"one\": c});\n\n          c.updateValue(\"some value\");\n\n          expect(g.valid).toEqual(true);\n          expect(g.errors).toEqual(null);\n        });\n      });\n\n      describe(\"pristine\", () => {\n        it(\"should be true after creating a control\", () => {\n          var c = new Control('value');\n          var g = new ControlGroup({\"one\": c});\n\n          expect(g.pristine).toEqual(true);\n        });\n\n        it(\"should be false after changing the value of the control\", () => {\n          var c = new Control('value');\n          var g = new ControlGroup({\"one\": c});\n          c.updateValue('new value');\n\n          expect(g.pristine).toEqual(false);\n        });\n      });\n\n      describe(\"optional components\", () => {\n        describe(\"contains\", () => {\n          var group;\n\n          beforeEach(() => {\n            group = new ControlGroup({\n              \"required\": new Control(\"requiredValue\"),\n              \"optional\": new Control(\"optionalValue\")\n            }, {\n              \"optional\": false\n            });\n          });\n\n          // rename contains into has\n          it(\"should return false when the component is not included\", () => {\n            expect(group.contains(\"optional\")).toEqual(false);\n          })\n\n          it(\"should return false when there is no component with the given name\", () => {\n            expect(group.contains(\"something else\")).toEqual(false);\n          });\n\n          it(\"should return true when the component is included\", () => {\n            expect(group.contains(\"required\")).toEqual(true);\n\n            group.include(\"optional\");\n\n            expect(group.contains(\"optional\")).toEqual(true);\n          });\n        });\n\n        it(\"should not include an inactive component into the group value\", () => {\n          var group = new ControlGroup({\n            \"required\": new Control(\"requiredValue\"),\n            \"optional\": new Control(\"optionalValue\")\n          }, {\n            \"optional\": false\n          });\n\n          expect(group.value).toEqual({\"required\" : \"requiredValue\"});\n\n          group.include(\"optional\");\n\n          expect(group.value).toEqual({\"required\" : \"requiredValue\", \"optional\" : \"optionalValue\"});\n        });\n\n        it(\"should not run Validators on an inactive component\", () => {\n          var group = new ControlGroup({\n            \"required\": new Control(\"requiredValue\", Validators.required),\n            \"optional\": new Control(\"\", Validators.required)\n          }, {\n            \"optional\": false\n          });\n\n          expect(group.valid).toEqual(true);\n\n          group.include(\"optional\");\n\n          expect(group.valid).toEqual(false);\n        });\n      });\n    });\n  });\n}\n","\n        $__export($__placeholder__0, $__placeholder__1)\n      ","return {\n      setters: $__placeholder__0,\n      execute: $__placeholder__1\n    }","function($__m) {\n          $__placeholder__0\n        }","$__placeholder__0 = $__m.$__placeholder__1;"]}